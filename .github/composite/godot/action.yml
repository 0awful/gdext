name: godot
description: "Run Godot integration tests"

inputs:
  artifact_name:
    required: true
    description: "Name of the compiled Godot artifact to download"

  github_pat:
    required: true
    description: "GitHub PAT (personal access token) to download artifacts from other repos"

  rust_toolchain:
    required: false
    default: 'stable'
    description: "Rust toolchain specifier (e.g. 'nightly')"

  rust_extra_args:
    required: false
    default: ''
    description: "Extra command line arguments for 'cargo build', e.g. features"


runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

#    - name: "Check cache for installed Godot version"
#      id: "cache-godot"
#      uses: actions/cache@v3
#      with:
#        path: ${{ runner.temp }}/godot_bin
#        #key: godot-${{ runner.os }}-v${{ inputs.godot_ver }}
#        key: ${{ inputs.artifact_name }}

    - name: "Download Godot artifact"
#      if: steps.cache-godot.outputs.cache-hit != 'true'
      # https://github.com/dawidd6/action-download-artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        # Downloads and unzips the artifact with {name} of the latest run of specified {workflow}
        path: ${{ runner.temp }}/godot_bin
        github_token: ${{ inputs.github_pat }}
        repo: Bromeon/godot4-nightly
        branch: master
        workflow: compile-godot.yml
        workflow_conclusion: success
        name: ${{ inputs.artifact_name }}
        # Search for the last workflow run, which stored an artifact named as in `name` input
        search_artifacts: true

    - name: "Store variable to Godot binary"
      run: |
        echo "GODOT_BIN=${{ runner.temp }}/godot_bin/godot.linuxbsd.editor.dev.x86_64" >> $GITHUB_ENV
      shell: bash

    - name: "Inspect Godot version"
      run: |
        chmod +x $GODOT_BIN
        godotVer=$($GODOT_BIN --version || true)
        gitSha=$(echo $godotVer | sed -E "s/.+custom_build\.//")
        echo "GODOT_BUILT_FROM=_Built from [\`$godotVer\`](https://github.com/godotengine/godot/commit/$gitSha)._" >> $GITHUB_ENV
        
        # By default, output error (will be displayed unless overwritten)
        echo "### :x: Godot integration tests failed" > $GITHUB_STEP_SUMMARY
        echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
      shell: bash

    # Note: if this fails, run `git diff -R > tweaks.patch` after updating the file manually
    - name: "Copy and compare GDExtension header"
      run: |
        mkdir -p godot-codegen/input
        cp ${{ runner.temp }}/godot_bin/gdnative_interface.h godot-codegen/input/gdnative_interface.h
        git apply godot-codegen/input/tweak.patch -v
        git diff --exit-code --quiet || {
            echo "gdnative_interface.h is not up-to-date; abort."
            echo ""
            
            echo "### :x: Outdated GDExtension API header" >> $GITHUB_STEP_SUMMARY
            echo "gdnative_interface.h contains the following differences:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
            git diff >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "After manually updating file, run:   \`git diff -R > tweak.patch\`." >> $GITHUB_STEP_SUMMARY

        	exit 1
        }
      shell: bash

    - name: "Install Rust"
      uses: ./.github/composite/rust
      with:
        rust: ${{ inputs.rust_toolchain }}

    - name: "Build godot-rust"
      run: |
        cargo build -p itest ${{ inputs.rust_extra_args }}
      shell: bash

    - name: "Run Godot integration tests"
      # Aborts immediately if Godot outputs certain keywords (would otherwise stall until CI runner times out).
      # Explanation:
      # * tee:      still output logs while scanning for errors
      # * grep -q:  no output, use exit code 0 if found -> thus also &&
      # * pkill:    stop Godot execution (since it hangs in headless mode); simple 'head -1' did not work as expected
      # * exit:     the terminated process would return 143, but this is more explicit and future-proof
      run: |
        cd itest/godot
        $GODOT_BIN --headless 2>&1 | tee >(grep "SCRIPT ERROR:" -q && {
        	printf "\n -- Godot engine encountered error, abort...\n";
        	pkill godot
        	echo "### :x: Godot runtime error" > $GITHUB_STEP_SUMMARY
            echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
        	echo "Aborted due to an error during Godot execution." >> $GITHUB_STEP_SUMMARY
        	exit 2
        })
        echo "### :heavy_check_mark: Godot integration tests passed" > $GITHUB_STEP_SUMMARY
        echo "$GODOT_BUILT_FROM" >> $GITHUB_STEP_SUMMARY
      shell: bash
